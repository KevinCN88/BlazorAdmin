@page "/setting/code-generator"

@using System.Reflection
@using BlazorAdmin.Data
@using BlazorAdmin.Core.Dynamic
@using BlazorAdmin.Data.Entities
@using System.ComponentModel.DataAnnotations.Schema
@using static BlazorAdmin.Component.Pages.PagePagination
@rendermode RenderMode.InteractiveServer
@inject IDbContextFactory<BlazorAdminDbContext> _dbFactory

<PageHeader Title="代码生成器">
    <div style="width:200px" class="mr-2">
        <MudSelect T="Type" @bind-Value="selectedEntity" Margin="Margin.Dense" Label="选择实体类"
                   Variant="Variant.Outlined" Clearable Class="search-com">
            @foreach (var entity in entityTypes)
            {
                <MudSelectItem Value="entity">@entity.Name</MudSelectItem>
            }
        </MudSelect>
    </div>
    <MudButton Color="Color.Primary" OnClick="GenerateCode" Class="mr-2">生成代码</MudButton>
</PageHeader>

<MudPaper Class="pa-4 mb-4 flex-1" Style="overflow:auto">
    @if (!string.IsNullOrEmpty(_pageSrc))
    {

        <MudText Style="white-space: pre; font-family: monospace; " Class="border">
            @_pageSrc
        </MudText>
    }
    @if (!string.IsNullOrEmpty(_createDialogSrc))
    {
        <MudText Style="white-space: pre; font-family: monospace; " Class="border mt-2">
            @_createDialogSrc
        </MudText>
    }
    @if (!string.IsNullOrEmpty(_editDialogSrc))
    {
        <MudText Style="white-space: pre; font-family: monospace; " Class="border mt-2">
            @_editDialogSrc
        </MudText>
    }
    </MudPaper>

    @code {

    private List<Type> entityTypes = new();
    private Type? selectedEntity;

    private string _pageSrc = string.Empty;

    private string _createDialogSrc = string.Empty;

    private string _editDialogSrc = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        LoadEntityTypes();
    }

    private void LoadEntityTypes()
    {
        var assemblies = AppDomain.CurrentDomain.GetAssemblies()
            .Where(a => !a.IsDynamic && a.GetName().Name?.StartsWith("BlazorAdmin") == true);

        entityTypes = assemblies
            .SelectMany(a => a.GetTypes())
            .Where(t => t.GetCustomAttributes(typeof(TableAttribute), true).Length > 0)
            .ToList();
    }

    private async Task GenerateCode()
    {
        if (selectedEntity == null) return;

        var entityName = selectedEntity.Name;
        var properties = selectedEntity.GetProperties()
            .Where(p => !p.GetCustomAttributes(typeof(NotMappedAttribute), true).Any())
            .ToList();

        var tableColumns = string.Join("\n        ", properties.Select(p =>
            $"<PropertyColumn Property =\"x => x.{p.Name}\" Title =\"{p.Name}\"/> "));

        var searchFields = string.Join("\n", properties
            .Where(p => p.PropertyType == typeof(string))
            .Select(p =>
                $"    <div style=\"width:140px\" class=\"mr-2\">\n" +
                $"        <MudTextField T=\"string\" @bind-Value=\"searchObject.Search{p.Name}\" \n" +
                $"            Margin=\"Margin.Dense\"  Label=\"{p.Name}\" Variant=\"Variant.Outlined\" \n" +
                $"            Clearable  Class=\"search-com\"></MudTextField>\n" +
                $"    </div>"));

        var searchProperties = string.Join("\n", properties
            .Select(p =>
            {
                var typeName = GetCSharpTypeName(p.PropertyType);
                return $"        public {typeName} Search{p.Name} {{ get; set; }}";
            }));

        var searchConditions = string.Join("\n", properties
            .Where(p => p.PropertyType == typeof(string))
            .Select(p =>
                $"        if (!string.IsNullOrEmpty(searchObject.Search{p.Name}))\n" +
                $"        {{\n" +
                $"            query = query.Where(x => x.{p.Name}!.Contains(searchObject.Search{p.Name}));\n" +
                $"        }}"));

        var modelProperties = string.Join("\n", properties
            .Select(p =>
            {
                var typeName = GetCSharpTypeName(p.PropertyType);
                return $"        public {typeName} {p.Name} {{ get; set; }}";
            }));

        var setProperties = string.Join(",\n", properties
            .Select(p =>
                 $"                {p.Name} = x.{p.Name}"));

        var code = $@"
@page ""/{entityName.ToLower()}page""

@rendermode RenderMode.InteractiveServer

@using BlazorAdmin.Data
@using BlazorAdmin.Core.Dynamic
@using BlazorAdmin.Data.Entities
@using static BlazorAdmin.Component.Pages.PagePagination

@using {selectedEntity.Namespace}

<PageHeader Title=""{entityName}管理"">
{searchFields}
    <MudIconButton Size=""MudBlazor.Size.Medium""
                   Icon=""@Icons.Material.Filled.Search"" Color=""Color.Primary"" Class=""mr-2""
                   OnClick=""()=> dataGrid.ReloadServerData()"" Variant=""Variant.Outlined""/>
    <MudTooltip Text=""重置搜索"" Color = ""Color.Primary"" >
        <MudIconButton Size=""MudBlazor.Size.Medium"" Icon = ""@Icons.Material.Filled.SearchOff""
            OnClick=""SearchReset"" Variant = ""Variant.Outlined"" Color = ""Color.Primary"" ></MudIconButton >
    </MudTooltip>
</PageHeader>

<MudDataGrid Dense=PageDataGridConfig.Dense
             Filterable=PageDataGridConfig.Filterable
             ColumnResizeMode=PageDataGridConfig.ColumnResizeMode
             SortMode=PageDataGridConfig.SortMode
             Groupable=PageDataGridConfig.Groupable
             Virtualize=PageDataGridConfig.Virtualize
             FixedHeader=PageDataGridConfig.FixedHeader
             Elevation=PageDataGridConfig.Elevation
             Outlined=PageDataGridConfig.Outlined
             Style=""@PageDataGridConfig.Style""
             HorizontalScrollbar=""PageDataGridConfig.HorizontalScrollbar""
             ServerData=""GetTableData""
             @ref=""dataGrid""
             T=""TableModel"">
    <Columns>
    {tableColumns}
        <TemplateColumn Title=""操作"" HeaderStyle="" white-space:nowrap;"">
            <CellTemplate>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<PagePagination PageInfo=""searchObject""
                PageChangedClick=""PageChangedClick"" />

@code {{

    private MudDataGrid<TableModel> dataGrid = null!;
    private List<TableModel> TableData = new();
    private SearchObject searchObject = new();

    protected override async Task OnInitializedAsync()
    {{
        await base.OnInitializedAsync();
    }}

    private async Task InitialAsync()
    {{
        using var context = await _dbFactory.CreateDbContextAsync();
        var query = context.Set<{entityName}>().AsQueryable();

{searchConditions}

        searchObject.Total = await query.CountAsync();
        StateHasChanged();
        var data = await query
            .OrderByDescending(x => x.Id)
            .Skip((searchObject.Page - 1) * searchObject.Size)
            .Take(searchObject.Size)
            .Select(x => new TableModel
            {{
{setProperties}
            }}).ToListAsync();

        TableData = data;
        StateHasChanged();
    }}

    private async Task PageChangedClick(int page)
    {{
        searchObject.Page = page;
        await dataGrid.ReloadServerData();
    }}

    private async Task<GridData<TableModel>> GetTableData(GridState<TableModel> gridState)
    {{
        await InitialAsync();
        return new GridData<TableModel>()
        {{
            TotalItems = searchObject.Total,
            Items = TableData
        }};
    }}

    private void SearchReset()
    {{
        searchObject = new();
        searchObject.Page = 1;
        dataGrid.ReloadServerData();
    }}

    private record SearchObject : PaginationModel
    {{
{searchProperties}
    }}

    private class TableModel
    {{
{modelProperties}
    }}
}}";

        _pageSrc = code;



        var formFields = string.Join("\n", properties.Select(p =>
            $"                <MudTextField T=\"{GetCSharpTypeName(p.PropertyType)}\" @bind-Value=\"EditModel.{p.Name}\"\n " +
            $"                      Label=\"{p.Name}\" Variant=\"Variant.Outlined\" For=\"()=>EditModel.{p.Name}\"/>"));
            
        var setEditModelProperties = string.Join(",\n", properties
            .Select(p =>
                 $"                {p.Name} = entity.{p.Name}"));
        var setEntityProperties = string.Join(",\n", properties
            .Select(p =>
                 $"                {p.Name} = EditModel.{p.Name}"));

        var createDialogCode = $@"
@using {selectedEntity.Namespace}

<MudDialog>
    <DialogContent>
        <div style=""width:400px;"" >
            <EditForm Model=""EditModel"" OnValidSubmit =""Submit"" >
                <DataAnnotationsValidator />
{formFields}
                <div class=""mt-4 d-flex align-center"" >
                    <MudSpacer />
                    <MudButton OnClick=""Cancel"">取消</MudButton>
                    <MudButton Color = ""Color.Primary"" ButtonType=""ButtonType.Submit"">确定</MudButton>
                </div>
            </EditForm>
        </div>
    </DialogContent>
</MudDialog>

@code {{
    [CascadingParameter] IMudDialogInstance MudDialog {{ get; set; }} = null!;

    [Parameter]public int? Id {{ get; set; }}

    private EditViewModel EditModel {{ get; set; }} = new();

    protected override async Task OnInitializedAsync()
    {{
        await base.OnInitializedAsync();
        if (Id.HasValue)
        {{
            using var context = await _dbFactory.CreateDbContextAsync();
            var entity = await context.Set<{entityName}>().FindAsync(Id.Value);
            EditModel = new EditViewModel
            {{
{setEditModelProperties}
            }};
        }}
    }}

    private void Cancel()
    {{
        MudDialog.Cancel();
    }}

    private async Task Submit()
    {{
        using var context = await _dbFactory.CreateDbContextAsync();
        var dataModel = new {entityName}
            {{
{setEntityProperties}
            }};
        if (Id.HasValue)
        {{
            await context.AddAsync(dataModel);
        }}
        else
        {{
            context.Update(dataModel);
        }}
        await context.SaveChangesAsync();
        MudDialog.Close(DialogResult.Ok(true));
    }}

    private class EditViewModel
    {{
{modelProperties}
    }}
}}";

        _createDialogSrc = createDialogCode;
        _editDialogSrc = createDialogCode;

    }

    private record SearchObject : PaginationModel
    {
    }

    private class EntityInfo
    {
        public string EntityName { get; set; } = string.Empty;
        public string TableName { get; set; } = string.Empty;
    }

    private string GetCSharpTypeName(Type type)
    {
        if (type == typeof(int) || type == typeof(Int32)) return "int";
        if (type == typeof(long) || type == typeof(Int64)) return "long";
        if (type == typeof(short) || type == typeof(Int16)) return "short";
        if (type == typeof(byte)) return "byte";
        if (type == typeof(uint) || type == typeof(UInt32)) return "uint";
        if (type == typeof(ulong) || type == typeof(UInt64)) return "ulong";
        if (type == typeof(ushort) || type == typeof(UInt16)) return "ushort";
        if (type == typeof(sbyte)) return "sbyte";
        if (type == typeof(float)) return "float";
        if (type == typeof(double)) return "double";
        if (type == typeof(decimal)) return "decimal";
        if (type == typeof(bool)) return "bool";
        if (type == typeof(char)) return "char";
        if (type == typeof(string) || type == typeof(String)) return "string";
        if (type == typeof(object)) return "object";
        if (type == typeof(void)) return "void";
        if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>))
        {
            return GetCSharpTypeName(type.GetGenericArguments()[0]) + "?";
        }
        return type.Name;
    }
}